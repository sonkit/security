/*
 * File: app/controller/OrgaController.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Security.controller.OrgaController', {
    extend: 'Ext.app.Controller',

    models: [
        'Orga',
        'User'
    ],
    stores: [
        'Orga',
        'OrgaUser'
    ],
    views: [
        'OrgaWin',
        'OrgaPanel'
    ],

    refs: [
        {
            ref: 'orgaWin',
            selector: 'orgawin'
        },
        {
            ref: 'userGrid',
            selector: 'tabpanel > orgapanel > gridpanel'
        },
        {
            ref: 'orgaTree',
            selector: 'orgapanel > orgatree'
        }
    ],

    onTreepanelItemContextMenu: function(dataview, record, item, index, e, eOpts) {
        e.stopEvent();
        var treeMenu = Ext.create('Ext.menu.Menu',{
            items: [{
                text: '添加',
                handler: function(button) {
                    var orgaWin = Ext.create('Security.view.OrgaWin'),
                        form = orgaWin.child('form');

                    if (record.isExpandable()) {
                        record.expand();
                    }

                    form.loadRecord(Ext.create('Security.model.Orga', {
                        parent: {id: record.get('id')}
                    }));
                    orgaWin.show(button);
                }
            }, {
                xtype: 'menuseparator'
            }, {
                text: '编辑',
                handler: function(button) {
                    var orgaWin = Ext.create('Security.view.OrgaWin'),
                        form = orgaWin.child('form');

                    if (record.isExpandable()) {
                        record.expand();
                    }

                    record.set('parent', {id: record.get('parentId')});

                    form.getForm().findField('code').readOnly = true;
                    form.loadRecord(record);
                    orgaWin.show(button);
                }
            }, {
                text: '删除',
                handler: function(button) {            
                    if (record.isLeaf()) {
                        Ext.create('Security.model.Orga', {
                            id: record.get('id')
                        }).destroy({
                            success: function() {
                                record.remove();
                            }
                        });
                    }
                } 
            }]
        });
        treeMenu.showAt(e.xy);
    },

    saveOrga: function(button, e, eOpts) {
        var win = this.getOrgaWin(),
            form = win.child('form'),
            orga = form.getRecord(),
            selectedNode = this.getOrgaTree().getSelectionModel().getLastSelected();

        if (form.isValid()) {

            var codeField = form.getForm().findField('code');

            if (!codeField.readOnly) {
                Ext.Ajax.request({
                    url: 'orgas/isPropertyUnique',
                    method: 'GET',
                    params: {
                        propertyName: 'code',
                        value: codeField.getValue()
                    },
                    success: function(response, opts) {
                        var o = Ext.decode(response.responseText);
                        if (!o.unique) {
                            codeField.markInvalid('组织机构代码已存在！');
                            return;
                        }
                        doSave();
                    }
                });
            } else {
                doSave();   
            }

            function doSave() {
                orga.set(form.getValues());
                orga.save({
                    success: function(organization) {
                        if (organization.get('id') != selectedNode.get('id')) {
                            if (selectedNode.isLeaf()) {                    
                                selectedNode.set('expandable', true);
                                selectedNode.set('leaf', false);
                                selectedNode.appendChild(organization);
                                selectedNode.expand();
                            } else {
                                selectedNode.appendChild(organization);
                            }
                        }
                        win.close();
                    }
                });
            }
        }

    },

    onOrgaTreeSelectionChange: function(model, selected, eOpts) {
        if (selected.length) {    
            var orgaId = selected[0].get('id'),
                userGrid = this.getUserGrid();

            userGrid.getStore().load({
                start: undefined,
                limit: undefined,
                params: {
                    orgaId: orgaId
                }
            });
        }
    },

    init: function(application) {
        this.control({
            "orgatree": {
                itemcontextmenu: this.onTreepanelItemContextMenu
            },
            "orgawin button[text='保存']": {
                click: this.saveOrga
            },
            "orgapanel > orgatree": {
                selectionchange: this.onOrgaTreeSelectionChange
            }
        });
    }

});
